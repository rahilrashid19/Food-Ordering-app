/*
planning for the App

1. Header Component
   - Logo
   -Navbar
   -cart
   search bar

2. Body Component
   - Resturant Card
     - Resturant Image
     - Resturant Name
     - Resturant rating
     -cusines

3. Footer Component
    - Links

*/


/**
 *  there are 2 types of exports
 * one is named export where we directly export the function using export keyword , and while importing the same in another component we need to use {}
 *
 * second is default export which by which we can export only one thing and we dont need {} while importing
 *  */


 



1. Never Create a new component inside another component... because when the rendering happens the nested component will be rendered everytime..

2. Never use useState hook inside an if statement or for loop because it will cause inconstency..

3. useState is a hook which react gives us to create a local state variable , so never use this hook outside the functional component..

****FOR ROUTING****

1. import createBrowserRouter from react-router-dom..

2. create router from createBrowserRouter . it will be an array of objects in which each object will be a path.. eg below

const appRouter = createBrowserRouter([
    {
        path:'/route',
        element: 'component to load'
    }
])

after creating the configuartion , we need to provide it to the app , 
render function will alawys render whatever we pass in to it..

so import routerProvider from the react-rouer-dom , and pass it to the root.render() with the router as appRouter.. eg below;

root.render(<routerProvider router={appRouter}/>)..

for errors react-router-dom provides a hook called useRouterError , with which we can what kind of error we are getting and we can use that information..

for nested routing we can use children key and it expects an array of objects.. eg below;
const routes = createBrowserRouter([
  {
    path: "/",
    element: <AppLayoutComponent />,
    errorElement: <Error />,
    children: [
      {
        path: "/",
        element: <BodyComponent />,
      },
      {
        path: "/about",
        element: <About />,
      },
      {
        path: "/contact",
        element: <Contact />,
      },
    ],
  },
]);

in above example , the children array will route to the given Components.. and to load these children routes with fixed header and footer , react-router-dom provides us with a component named <Outlet/> , and we need to use this component between the elements which we want to be constant...


/*
useState hook is a normal javascript function

it returns us an array in which first element is the state variable and second element is the function to update that variable.
in the second argumnet which is a function we pass the state variable..


useEffect hook is also a normal javascript function...
it takes two parameters , first one is call back function , and second one is dependency array...

******* NOTE *****************
1. if there is no dependency array , useEffect will be called on every render after initial rendering..

2. if there is a dependency array , useEffect will be called only after first render... (initial rendering)...

3. if there is a dependency array with some state variable or props in it , useEffect will be called every time the state variable changes after the initial render....

****NOTE******

wherever you change the state variable , it triggeres the reconciliation process and re renders the component

*/
